jobs:
- job: Windows_CI_Dev
  variables:
    buildDirectory: '$(Build.BinariesDirectory)'
    buildConfig: 'RelWithDebInfo'
  steps:
    - template: templates/set-test-data-variables-step.yml
    - task: NuGetCommand@2
      displayName: 'NuGet restore'
      inputs:
        restoreSolution: '$(Build.SourcesDirectory)\csharp\OnnxRuntime.CSharp.sln'
        feedsToUse: config
        nugetConfigPath: '$(Build.SourcesDirectory)\csharp\Nuget.CSharp.config'
        restoreDirectory: '$(Build.SourcesDirectory)\csharp'
    - task: UniversalPackages@0
      displayName: 'Download python'
      inputs:
        command: download
        vstsFeed: '$(System.TeamProject)'
        vstsFeedPackage: 'miniconda3_win64'
        vstsPackageVersion: '4.5.11'
        downloadDirectory: '$(Build.BinariesDirectory)\python'
    - task: CmdLine@1
      displayName: 'Run python installer'
      inputs:
        filename: '$(Build.BinariesDirectory)\python\installer.exe'
        arguments: '/S /NoRegistry=1 /AddToPath=0 /RegisterPython=0 /D=$(Build.BinariesDirectory)\packages\python'
      timeoutInMinutes: 10
    - task: BatchScript@1
      displayName: 'setup env'
      inputs:
        filename: '$(Build.SourcesDirectory)\tools\ci_build\github\windows\setup_env.bat'
        modifyEnvironment: true
        workingFolder: '$(Build.BinariesDirectory)'
    - task: CmdLine@1
      displayName: 'Install conda modules'
      inputs:
        filename: '$(Build.BinariesDirectory)\packages\python\scripts\conda.exe'
        arguments: 'install -q --insecure -y pyopenssl setuptools wheel numpy'
      timeoutInMinutes: 10

    - task: CmdLine@1
      displayName: 'Download cmake'
      inputs:
        filename: '$(Build.BinariesDirectory)\packages\python\python.exe'
        arguments: '$(Build.SourcesDirectory)\tools\ci_build\github\windows\download_cmake.py --build_dir $(Build.BinariesDirectory)'
    - task: CmdLine@1
      displayName: 'Download test data and generate cmake config'
      inputs:
        filename: '$(Build.BinariesDirectory)\packages\python\python.exe'
        arguments: '$(Build.SourcesDirectory)\tools\ci_build\build.py --config $(buildConfig) --build_dir $(Build.BinariesDirectory) --skip_submodule_sync --cmake_path $(Build.BinariesDirectory)\cmake\bin\cmake.exe --ctest_path $(Build.BinariesDirectory)\cmake\bin\ctest.exe --use_openmp  --build_shared_lib --enable_onnx_tests --test_data_url $(TestDataUrl) --test_data_checksum $(TestDataChecksum) --update'
        workingFoLder: "$(Build.BinariesDirectory)"


    - task: VSBuild@1
      displayName: 'Build $(buildConfig)'
      inputs:
        solution: '$(Build.BinariesDirectory)\$(buildConfig)\onnxruntime.sln'
        platform: 'x64'
        configuration: '$(buildConfig)'
        msbuildArgs: '/m'
        msbuildArchitecture: 'x64'
        logProjectEvents: true
        workingFolder: '$(Build.BinariesDirectory)\$(buildConfig)'

    - task: BatchScript@1
      displayName: 'Test $(buildConfig)'
      inputs:
        filename: '$(Build.BinariesDirectory)\packages\python\python.exe'
        arguments: '$(Build.SourcesDirectory)\tools\ci_build\build.py --config $(buildConfig) --build_dir $(Build.BinariesDirectory) --skip_submodule_sync --cmake_path $(Build.BinariesDirectory)\cmake\bin\cmake.exe --ctest_path $(Build.BinariesDirectory)\cmake\bin\ctest.exe  --use_openmp --build_shared_lib  --enable_onnx_tests --test_data_url $(TestDataUrl) --test_data_checksum $(TestDataChecksum) --test'
        workingFolder: "$(Build.BinariesDirectory)"

    - task: PublishTestResults@2
      displayName: 'Publish unit test results'
      inputs:
        testResultsFiles: '**\*.results.xml'
        searchFolder: '$(Build.BinariesDirectory)'
        testRunTitle: 'Unit Test Run'
      condition: succeededOrFailed()

    - task: CmdLine@2
      displayName: 'Copy build artifacts for zipping'
      inputs:
        script: |
          mkdir $(Build.BinariesDirectory)\onnxruntime-win-x64
          set ArtifactsRoot=$(Build.BinariesDirectory)\onnxruntime-win-x64
          mkdir $(ArtifactsRoot)\lib
          mkdir $(ArtifactsRoot)\include
          
          copy $(Build.BinariesDirectory)\$(buildConfig)\$(buildConfig)\onnxruntme.dll $(ArtifactsRoot)\lib
          copy $(Build.BinariesDirectory)\$(buildConfig)\$(buildConfig)\onnxruntme.lib $(ArtifactsRoot)\lib
          copy $(Build.SourcesDirectory)\include\onnxruntime\core\session\onnxruntime_c_api.h  mkdir $(ArtifactsRoot)\include
        workingDirectory: '$(Build.BinariesDirectory)\$(buildConfig)'

    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: '$(Build.BinariesDirectory)\onnxruntime-win-x64' 
        includeRootFolder: true
        archiveType: 'zip' # Options: zip, 7z, tar, wim
        archiveFile: '$(Build.ArtifactStagingDirectory)\onnxruntime-win-x64.zip' 
        replaceExistingArchive: true 
      
    - task: PublishBuildArtifacts@1
      inputs:
        pathtoPublish: '$(Build.ArtifactStagingDirectory)\onnxruntime-win-x64.zip' 
        artifactName: 'drop' 
    
    - template: templates/clean-agent-build-directory-step.yml


